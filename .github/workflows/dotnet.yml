# =============================================================================
# Enhanced CI/CD Workflow for .NET Project
# =============================================================================
# This workflow provides:
# - NuGet package caching for faster builds
# - Multi-configuration build support
# - Code format verification (dotnet format)
# - Automated testing with code coverage
# - Release artifact publishing
# - Extensible structure for deployment stages
#
# For more information: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net
# =============================================================================
name: .NET CI/CD

# =============================================================================
# Triggers
# =============================================================================
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:  # Allow manual trigger

# =============================================================================
# Environment Variables
# =============================================================================
env:
  DOTNET_VERSION: '8.0.x'
  SOLUTION_PATH: 'WebApplication2.sln'
  BUILD_CONFIGURATION: 'Release'
  ARTIFACT_NAME: 'BooksWebApi-Release'

# =============================================================================
# Jobs
# =============================================================================
jobs:
  # ===========================================================================
  # Code Quality Check
  # ===========================================================================
  code-format:
    name: Check Code Format
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore .NET tools
      run: dotnet tool restore || dotnet tool install -g dotnet-format
    
    - name: Apply code formatting
      run: dotnet format ${{ env.SOLUTION_PATH }} --verbosity diagnostic
    
    - name: Check for formatting changes
      id: verify-changed-files
      run: |
        if git diff --quiet; then
          echo "No formatting changes needed"
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "Formatting changes detected"
          echo "changed=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Commit formatting changes
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add -A
        git commit -m "Auto-fix: Apply dotnet format whitespace corrections"
        git push

  # ===========================================================================
  # Build and Test
  # ===========================================================================
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: code-format  # Run after format check passes
    
    strategy:
      matrix:
        configuration: [Debug, Release]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    # -------------------------------------------------------------------------
    # NuGet Package Caching
    # -------------------------------------------------------------------------
    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    # -------------------------------------------------------------------------
    # Restore Dependencies
    # -------------------------------------------------------------------------
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
    
    # -------------------------------------------------------------------------
    # Build Solution
    # -------------------------------------------------------------------------
    - name: Build solution (${{ matrix.configuration }})
      run: |
        dotnet build ${{ env.SOLUTION_PATH }} \
          --configuration ${{ matrix.configuration }} \
          --no-restore \
          --verbosity normal
    
    # -------------------------------------------------------------------------
    # Run Tests with Coverage
    # -------------------------------------------------------------------------
    - name: Run tests with coverage
      run: |
        dotnet test ${{ env.SOLUTION_PATH }} \
          --configuration ${{ matrix.configuration }} \
          --no-build \
          --verbosity normal \
          --logger trx \
          --collect:"XPlat Code Coverage"
    
    # -------------------------------------------------------------------------
    # Upload Test Results
    # -------------------------------------------------------------------------
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.configuration }}
        path: '**/*.trx'
        retention-days: 7
    
    # -------------------------------------------------------------------------
    # Upload Code Coverage
    # -------------------------------------------------------------------------
    - name: Upload coverage reports
      if: matrix.configuration == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: '**/coverage.cobertura.xml'
        retention-days: 7

  # ===========================================================================
  # Publish Release Artifacts
  # ===========================================================================
  publish-artifacts:
    name: Publish Release Artifacts
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
    
    # -------------------------------------------------------------------------
    # Publish Application
    # -------------------------------------------------------------------------
    - name: Publish application
      run: |
        dotnet publish ${{ env.SOLUTION_PATH }} \
          --configuration ${{ env.BUILD_CONFIGURATION }} \
          --no-restore \
          --output ./publish \
          --verbosity normal
    
    # -------------------------------------------------------------------------
    # Upload Release Artifacts
    # -------------------------------------------------------------------------
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ./publish
        retention-days: 30
    
    # -------------------------------------------------------------------------
    # Create deployment package info
    # -------------------------------------------------------------------------
    - name: Generate deployment metadata
      run: |
        echo "Build Date: $(date)" > ./publish/deployment-info.txt
        echo "Commit SHA: ${{ github.sha }}" >> ./publish/deployment-info.txt
        echo "Branch: ${{ github.ref_name }}" >> ./publish/deployment-info.txt
        echo "Configuration: ${{ env.BUILD_CONFIGURATION }}" >> ./publish/deployment-info.txt

# ===========================================================================
# Deployment Stage (Placeholder)
# ===========================================================================
# Uncomment and configure when ready to add deployment
#
# deploy-to-staging:
#   name: Deploy to Staging
#   runs-on: ubuntu-latest
#   needs: publish-artifacts
#   environment:
#     name: staging
#     url: https://staging.yourapp.com
# 
#   steps:
#   - name: Download artifacts
#     uses: actions/download-artifact@v3
#     with:
#       name: ${{ env.ARTIFACT_NAME }}
# 
#   - name: Deploy to staging environment
#     run: |
#       # Add your deployment script here
#       echo "Deploying to staging..."
#
# deploy-to-production:
#   name: Deploy to Production
#   runs-on: ubuntu-latest
#   needs: deploy-to-staging
#   environment:
#     name: production
#     url: https://yourapp.com
# 
#   steps:
#   - name: Download artifacts
#     uses: actions/download-artifact@v3
#     with:
#       name: ${{ env.ARTIFACT_NAME }}
# 
#   - name: Deploy to production environment
#     run: |
#       # Add your deployment script here
#       echo "Deploying to production..."

# =============================================================================
# End of Workflow
# =============================================================================
